version: 2.1

orbs:
  docker: circleci/docker@2.1.1
  gcp-gcr: circleci/gcp-gcr@0.13.0
  slack: circleci/slack@4.4.4
  rust: circleci/rust@1.5.0
  codecov: codecov/codecov@3.2.2

executors:
  base-cimg-executor:
    docker:
      - image: cimg/base:2021.07
  go-cimg-executor:
    docker:
      - image: cimg/go:1.19
        user: root
  python-cimg-executor:
    docker:
      - image: cimg/python:3.10.6
  base-machine-executor:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true

parameters:
  updated-aperture-go:
    type: boolean
    default: false

jobs:
  pre-commit:
    executor: python-cimg-executor
    resource_class: xlarge
    steps:
      - checkout
      - asdf_install:
          cache_name: pre-commit
          tools: |-
            pre-commit
            golang
            golangci-lint
      - restore_cache:
          name: Restore go cache
          keys:
            - aperture-v1-go-cache-{{ checksum "~/day" }}
      - run:
          name: Cache golangci-lint run
          command: |
            golangci-lint run || true
      - run:
          name: set GOMAXPROCS to 4
          command: |
            echo 'export GOMAXPROCS=4' >> $BASH_ENV
      - run:
          name: Generate pre-commit cache key file
          command: |
            cp .pre-commit-config.yaml /tmp/pre-commit-cache-key.txt
            python --version --version >> /tmp/pre-commit-cache-key.txt
            pre-commit --version >> /tmp/pre-commit-cache-key.txt
      - restore_cache:
          name: Restore pre-commit cache
          keys:
            - aperture-v1-pc-cache-{{ checksum "/tmp/pre-commit-cache-key.txt"
              }}
            - aperture-v1-pc-cache-
      - run:
          name: Install pre-commit hooks
          command: |
            pre-commit install-hooks
      - run:
          name: Run pre-commit
          # It'd be faster to run it only on files changed between current branch and target PR branch
          # This can be done with: pre-commit run --from-ref <TARGET_BRANCH> --to-ref HEAD
          # Unfortunately, CircleCI doesn't expose target branch
          # Possible option is to use narrativescience/ghpr orb with get-pr-info, but this step can't be disabled
          # So then we'd only be able to run this job on PRs, and would require separate job for running on main
          # We use alternative approach, in which:
          # 1) If current branch is main - pre-commit checks all files
          # 2) Otherwise - we find common ancestor between current commit and main and run pre-commit with a base (from-ref) set to that ancestor
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              pre-commit run --all-files
            else
              base_ref="$(git merge-base main $CIRCLE_SHA1)"
              pre-commit run --from-ref "${base_ref}" --to-ref "$CIRCLE_SHA1"
            fi
      - save_cache:
          name: Save go cache
          key: aperture-v1-go-cache-{{ checksum "~/day" }}
          paths:
            - ../.cache/golangci-lint
            - ../.cache/go-build
          when: on_success
      - save_cache:
          name: Save pre-commit cache
          key:
            aperture-v1-pc-cache-{{ checksum "/tmp/pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      - asdf_save_cache:
          cache_name: pre-commit
      - run:
          name:
            Show diff and assert pre-commit didn't create any non-ignored files
          command: |
            git status
            git add .
            git diff --cached --exit-code
          when: always

workflows:
  version: 2

  pre-commit:
    jobs:
      - pre-commit


commands:
  asdf_install:
    description: "Install tools using ASDF"
    parameters:
      tools:
        type: string
        description:
          "Newline separated list of tools to install. If empty, will install
          everything."
        default: ""
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - run:
          name: Install ASDF
          command: |
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
            printf '\nsource "${HOME}/.asdf/asdf.sh"\n' >> "${BASH_ENV}"
            date +%m > ~/month
            date +%d > ~/day
      # We need to restore ASDF cache after installing, otherwise we will try to clone it to non-empty dir
      - restore_cache:
          name: Restore ASDF cache
          keys:
            - aperture-go-asdf-cache-v1-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{
              checksum "go.mod" }}
            - aperture-go-asdf-cache-v1-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-
      - run:
          name: Install ASDF tools
          environment:
            TOOLS: << parameters.tools >>
          command: .circleci/scripts/asdf_install.sh
  asdf_save_cache:
    parameters:
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - save_cache:
          name: Save ASDF cache
          key:
            aperture-go-asdf-cache-v1-{{ checksum "~/month" }}-<<
            parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{ checksum
            "go.mod" }}
          paths:
            - ~/.asdf
